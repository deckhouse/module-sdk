// Code generated by http://github.com/gojuno/minimock (v3.4.7). DO NOT EDIT.

package mock

//go:generate minimock -i k8s.io/client-go/dynamic.Interface -o kubernetes_dynamic_client_mock.go -n KubernetesDynamicClientMock -p mock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"k8s.io/apimachinery/pkg/runtime/schema"
	mm_dynamic "k8s.io/client-go/dynamic"
)

// KubernetesDynamicClientMock implements mm_dynamic.Interface
type KubernetesDynamicClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcResource          func(resource schema.GroupVersionResource) (n1 mm_dynamic.NamespaceableResourceInterface)
	funcResourceOrigin    string
	inspectFuncResource   func(resource schema.GroupVersionResource)
	afterResourceCounter  uint64
	beforeResourceCounter uint64
	ResourceMock          mKubernetesDynamicClientMockResource
}

// NewKubernetesDynamicClientMock returns a mock for mm_dynamic.Interface
func NewKubernetesDynamicClientMock(t minimock.Tester) *KubernetesDynamicClientMock {
	m := &KubernetesDynamicClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ResourceMock = mKubernetesDynamicClientMockResource{mock: m}
	m.ResourceMock.callArgs = []*KubernetesDynamicClientMockResourceParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mKubernetesDynamicClientMockResource struct {
	optional           bool
	mock               *KubernetesDynamicClientMock
	defaultExpectation *KubernetesDynamicClientMockResourceExpectation
	expectations       []*KubernetesDynamicClientMockResourceExpectation

	callArgs []*KubernetesDynamicClientMockResourceParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// KubernetesDynamicClientMockResourceExpectation specifies expectation struct of the Interface.Resource
type KubernetesDynamicClientMockResourceExpectation struct {
	mock               *KubernetesDynamicClientMock
	params             *KubernetesDynamicClientMockResourceParams
	paramPtrs          *KubernetesDynamicClientMockResourceParamPtrs
	expectationOrigins KubernetesDynamicClientMockResourceExpectationOrigins
	results            *KubernetesDynamicClientMockResourceResults
	returnOrigin       string
	Counter            uint64
}

// KubernetesDynamicClientMockResourceParams contains parameters of the Interface.Resource
type KubernetesDynamicClientMockResourceParams struct {
	resource schema.GroupVersionResource
}

// KubernetesDynamicClientMockResourceParamPtrs contains pointers to parameters of the Interface.Resource
type KubernetesDynamicClientMockResourceParamPtrs struct {
	resource *schema.GroupVersionResource
}

// KubernetesDynamicClientMockResourceResults contains results of the Interface.Resource
type KubernetesDynamicClientMockResourceResults struct {
	n1 mm_dynamic.NamespaceableResourceInterface
}

// KubernetesDynamicClientMockResourceOrigins contains origins of expectations of the Interface.Resource
type KubernetesDynamicClientMockResourceExpectationOrigins struct {
	origin         string
	originResource string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmResource *mKubernetesDynamicClientMockResource) Optional() *mKubernetesDynamicClientMockResource {
	mmResource.optional = true
	return mmResource
}

// Expect sets up expected params for Interface.Resource
func (mmResource *mKubernetesDynamicClientMockResource) Expect(resource schema.GroupVersionResource) *mKubernetesDynamicClientMockResource {
	if mmResource.mock.funcResource != nil {
		mmResource.mock.t.Fatalf("KubernetesDynamicClientMock.Resource mock is already set by Set")
	}

	if mmResource.defaultExpectation == nil {
		mmResource.defaultExpectation = &KubernetesDynamicClientMockResourceExpectation{}
	}

	if mmResource.defaultExpectation.paramPtrs != nil {
		mmResource.mock.t.Fatalf("KubernetesDynamicClientMock.Resource mock is already set by ExpectParams functions")
	}

	mmResource.defaultExpectation.params = &KubernetesDynamicClientMockResourceParams{resource}
	mmResource.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmResource.expectations {
		if minimock.Equal(e.params, mmResource.defaultExpectation.params) {
			mmResource.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmResource.defaultExpectation.params)
		}
	}

	return mmResource
}

// ExpectResourceParam1 sets up expected param resource for Interface.Resource
func (mmResource *mKubernetesDynamicClientMockResource) ExpectResourceParam1(resource schema.GroupVersionResource) *mKubernetesDynamicClientMockResource {
	if mmResource.mock.funcResource != nil {
		mmResource.mock.t.Fatalf("KubernetesDynamicClientMock.Resource mock is already set by Set")
	}

	if mmResource.defaultExpectation == nil {
		mmResource.defaultExpectation = &KubernetesDynamicClientMockResourceExpectation{}
	}

	if mmResource.defaultExpectation.params != nil {
		mmResource.mock.t.Fatalf("KubernetesDynamicClientMock.Resource mock is already set by Expect")
	}

	if mmResource.defaultExpectation.paramPtrs == nil {
		mmResource.defaultExpectation.paramPtrs = &KubernetesDynamicClientMockResourceParamPtrs{}
	}
	mmResource.defaultExpectation.paramPtrs.resource = &resource
	mmResource.defaultExpectation.expectationOrigins.originResource = minimock.CallerInfo(1)

	return mmResource
}

// Inspect accepts an inspector function that has same arguments as the Interface.Resource
func (mmResource *mKubernetesDynamicClientMockResource) Inspect(f func(resource schema.GroupVersionResource)) *mKubernetesDynamicClientMockResource {
	if mmResource.mock.inspectFuncResource != nil {
		mmResource.mock.t.Fatalf("Inspect function is already set for KubernetesDynamicClientMock.Resource")
	}

	mmResource.mock.inspectFuncResource = f

	return mmResource
}

// Return sets up results that will be returned by Interface.Resource
func (mmResource *mKubernetesDynamicClientMockResource) Return(n1 mm_dynamic.NamespaceableResourceInterface) *KubernetesDynamicClientMock {
	if mmResource.mock.funcResource != nil {
		mmResource.mock.t.Fatalf("KubernetesDynamicClientMock.Resource mock is already set by Set")
	}

	if mmResource.defaultExpectation == nil {
		mmResource.defaultExpectation = &KubernetesDynamicClientMockResourceExpectation{mock: mmResource.mock}
	}
	mmResource.defaultExpectation.results = &KubernetesDynamicClientMockResourceResults{n1}
	mmResource.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmResource.mock
}

// Set uses given function f to mock the Interface.Resource method
func (mmResource *mKubernetesDynamicClientMockResource) Set(f func(resource schema.GroupVersionResource) (n1 mm_dynamic.NamespaceableResourceInterface)) *KubernetesDynamicClientMock {
	if mmResource.defaultExpectation != nil {
		mmResource.mock.t.Fatalf("Default expectation is already set for the Interface.Resource method")
	}

	if len(mmResource.expectations) > 0 {
		mmResource.mock.t.Fatalf("Some expectations are already set for the Interface.Resource method")
	}

	mmResource.mock.funcResource = f
	mmResource.mock.funcResourceOrigin = minimock.CallerInfo(1)
	return mmResource.mock
}

// When sets expectation for the Interface.Resource which will trigger the result defined by the following
// Then helper
func (mmResource *mKubernetesDynamicClientMockResource) When(resource schema.GroupVersionResource) *KubernetesDynamicClientMockResourceExpectation {
	if mmResource.mock.funcResource != nil {
		mmResource.mock.t.Fatalf("KubernetesDynamicClientMock.Resource mock is already set by Set")
	}

	expectation := &KubernetesDynamicClientMockResourceExpectation{
		mock:               mmResource.mock,
		params:             &KubernetesDynamicClientMockResourceParams{resource},
		expectationOrigins: KubernetesDynamicClientMockResourceExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmResource.expectations = append(mmResource.expectations, expectation)
	return expectation
}

// Then sets up Interface.Resource return parameters for the expectation previously defined by the When method
func (e *KubernetesDynamicClientMockResourceExpectation) Then(n1 mm_dynamic.NamespaceableResourceInterface) *KubernetesDynamicClientMock {
	e.results = &KubernetesDynamicClientMockResourceResults{n1}
	return e.mock
}

// Times sets number of times Interface.Resource should be invoked
func (mmResource *mKubernetesDynamicClientMockResource) Times(n uint64) *mKubernetesDynamicClientMockResource {
	if n == 0 {
		mmResource.mock.t.Fatalf("Times of KubernetesDynamicClientMock.Resource mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmResource.expectedInvocations, n)
	mmResource.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmResource
}

func (mmResource *mKubernetesDynamicClientMockResource) invocationsDone() bool {
	if len(mmResource.expectations) == 0 && mmResource.defaultExpectation == nil && mmResource.mock.funcResource == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmResource.mock.afterResourceCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmResource.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Resource implements mm_dynamic.Interface
func (mmResource *KubernetesDynamicClientMock) Resource(resource schema.GroupVersionResource) (n1 mm_dynamic.NamespaceableResourceInterface) {
	mm_atomic.AddUint64(&mmResource.beforeResourceCounter, 1)
	defer mm_atomic.AddUint64(&mmResource.afterResourceCounter, 1)

	mmResource.t.Helper()

	if mmResource.inspectFuncResource != nil {
		mmResource.inspectFuncResource(resource)
	}

	mm_params := KubernetesDynamicClientMockResourceParams{resource}

	// Record call args
	mmResource.ResourceMock.mutex.Lock()
	mmResource.ResourceMock.callArgs = append(mmResource.ResourceMock.callArgs, &mm_params)
	mmResource.ResourceMock.mutex.Unlock()

	for _, e := range mmResource.ResourceMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1
		}
	}

	if mmResource.ResourceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmResource.ResourceMock.defaultExpectation.Counter, 1)
		mm_want := mmResource.ResourceMock.defaultExpectation.params
		mm_want_ptrs := mmResource.ResourceMock.defaultExpectation.paramPtrs

		mm_got := KubernetesDynamicClientMockResourceParams{resource}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.resource != nil && !minimock.Equal(*mm_want_ptrs.resource, mm_got.resource) {
				mmResource.t.Errorf("KubernetesDynamicClientMock.Resource got unexpected parameter resource, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmResource.ResourceMock.defaultExpectation.expectationOrigins.originResource, *mm_want_ptrs.resource, mm_got.resource, minimock.Diff(*mm_want_ptrs.resource, mm_got.resource))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmResource.t.Errorf("KubernetesDynamicClientMock.Resource got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmResource.ResourceMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmResource.ResourceMock.defaultExpectation.results
		if mm_results == nil {
			mmResource.t.Fatal("No results are set for the KubernetesDynamicClientMock.Resource")
		}
		return (*mm_results).n1
	}
	if mmResource.funcResource != nil {
		return mmResource.funcResource(resource)
	}
	mmResource.t.Fatalf("Unexpected call to KubernetesDynamicClientMock.Resource. %v", resource)
	return
}

// ResourceAfterCounter returns a count of finished KubernetesDynamicClientMock.Resource invocations
func (mmResource *KubernetesDynamicClientMock) ResourceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmResource.afterResourceCounter)
}

// ResourceBeforeCounter returns a count of KubernetesDynamicClientMock.Resource invocations
func (mmResource *KubernetesDynamicClientMock) ResourceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmResource.beforeResourceCounter)
}

// Calls returns a list of arguments used in each call to KubernetesDynamicClientMock.Resource.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmResource *mKubernetesDynamicClientMockResource) Calls() []*KubernetesDynamicClientMockResourceParams {
	mmResource.mutex.RLock()

	argCopy := make([]*KubernetesDynamicClientMockResourceParams, len(mmResource.callArgs))
	copy(argCopy, mmResource.callArgs)

	mmResource.mutex.RUnlock()

	return argCopy
}

// MinimockResourceDone returns true if the count of the Resource invocations corresponds
// the number of defined expectations
func (m *KubernetesDynamicClientMock) MinimockResourceDone() bool {
	if m.ResourceMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ResourceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ResourceMock.invocationsDone()
}

// MinimockResourceInspect logs each unmet expectation
func (m *KubernetesDynamicClientMock) MinimockResourceInspect() {
	for _, e := range m.ResourceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to KubernetesDynamicClientMock.Resource at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterResourceCounter := mm_atomic.LoadUint64(&m.afterResourceCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ResourceMock.defaultExpectation != nil && afterResourceCounter < 1 {
		if m.ResourceMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to KubernetesDynamicClientMock.Resource at\n%s", m.ResourceMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to KubernetesDynamicClientMock.Resource at\n%s with params: %#v", m.ResourceMock.defaultExpectation.expectationOrigins.origin, *m.ResourceMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcResource != nil && afterResourceCounter < 1 {
		m.t.Errorf("Expected call to KubernetesDynamicClientMock.Resource at\n%s", m.funcResourceOrigin)
	}

	if !m.ResourceMock.invocationsDone() && afterResourceCounter > 0 {
		m.t.Errorf("Expected %d calls to KubernetesDynamicClientMock.Resource at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ResourceMock.expectedInvocations), m.ResourceMock.expectedInvocationsOrigin, afterResourceCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *KubernetesDynamicClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockResourceInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *KubernetesDynamicClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *KubernetesDynamicClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockResourceDone()
}
